# Contenedores

## **1. Instalación de Docker**

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04

## **2 Introducción**

### ¿Qué es Docker?**  

Docker es una **plataforma de virtualización** que permite empaquetar, distribuir y ejecutar aplicaciones junto con todas sus dependencias en un entorno aislado llamado **contenedor**. Esto facilita la portabilidad, escalabilidad y despliegue de aplicaciones en diferentes entornos sin preocuparse por configuraciones específicas del sistema operativo o conflictos de dependencias.

### **¿Qué es un contenedor en Docker?**

Un **contenedor** es una **unidad de software ligera y portable** que incluye todo lo necesario para ejecutar una aplicación:  

- Código de la aplicación  
- Dependencias y librerías  
- Variables de entorno  
- Configuración del sistema  

Los contenedores se ejecutan de manera **aislada**, lo que significa que pueden compartir el mismo núcleo del sistema operativo pero sin interferir entre sí. Esto los hace más eficientes que las máquinas virtuales, ya que **consumen menos recursos** y se inician rápidamente.

![Comparación contenedor-máquina virtual](/assets/contenedores/comparacion.png)

---

💡 **Ejemplo simple de uso de Docker:**  

```bash
docker run -d -p 8080:80 nginx
```

Esto descarga y ejecuta un contenedor con el servidor web Nginx, accesible en `http://localhost:8080`. 🚀



### **Conceptos clave**

- **Imagen**: Es una plantilla inmutable que contiene todo lo necesario para ejecutar una aplicación (código, dependencias, sistema operativo, etc.).
- **Contenedor**: Es una instancia en ejecución de una imagen.
- **Dockerfile**: Archivo donde defines cómo construir tu imagen.
- **Docker Hub**: Repositorio público de imágenes preconstruidas.

## **3. Comandos básicos**

### **Iniciar Docker**

Asegúrate de que Docker esté corriendo:
```bash
sudo systemctl start docker
sudo systemctl enable docker  # Para iniciar Docker al arrancar el sistema
```

### **Descargar imágenes**

Ejemplo: Descargar la imagen de Ubuntu:

```bash
docker pull ubuntu
```

### **Ejecutar un contenedor**

Ejecuta un contenedor interactivo de Ubuntu:

```bash
docker run -it ubuntu
```

### **Listar contenedores**

- Contenedores activos:

  ```bash
  docker ps
  ```

- Todos los contenedores (activos e inactivos):

  ```bash
  docker ps -a
  ```

### **Detener un contenedor e iniciar uno parado**

```bash
docker stop <ID_del_contenedor>
docker start <ID_del_contenedor>
```

### **Eliminar un contenedor**

```bash
docker rm <ID_del_contenedor>
```

### **Eliminar una imagen**

```bash
docker rmi <ID_de_la_imagen>
```

## **4. Crear una imagen con un Dockerfile**
 
1. Crea un directorio de prueba: `pruebaservidor`
2. Crea un archivo llamado `Dockerfile` dentro de él:

  ```dockerfile
  # Usa Ubuntu como imagen base
  FROM ubuntu:latest

  # Instala Apache2 de manera silenciosa
  RUN apt update && apt install -y apache2

  # Copia la carpeta "html" al directorio raíz de Apache
  COPY html/ /var/www/html/

  # Expone el puerto 80 para acceder al servidor
  EXPOSE 80

  # Comando para iniciar Apache en primer plano
  CMD ["apachectl", "-D", "FOREGROUND"]
  ```

3. Crea un fichero `html/index.html` con el texto "Hola Mundo"

4. Construye la imagen:

   ```bash
   docker build -t mi-servidor-apache .
   ```

5. Ejecuta la imagen:

   ```bash
   docker run -d -p 8000:80 --name servidor-web2 mi-servidor-apache
   ```

---







# Si. Expkica como buscar imágenes que me sirvan y como uusarlas

¡Perfecto! Buscar imágenes de Docker y usarlas es una de las partes más prácticas y útiles. Aquí tienes una guía paso a paso:

---

## **1. Buscar imágenes en Docker Hub**
Docker Hub es el repositorio oficial de Docker donde puedes encontrar miles de imágenes listas para usar.

### **Buscar imágenes en Docker Hub:**
1. Ve a la web oficial de Docker Hub: [https://hub.docker.com/](https://hub.docker.com/).
2. Usa la barra de búsqueda para encontrar una imagen relacionada con tu necesidad.
   - Por ejemplo, si necesitas una base de datos MySQL, busca "mysql".
3. Verifica:
   - **Nombre oficial**: Las imágenes oficiales tienen un icono de verificación (✔️).
   - **Popularidad**: Mira el número de descargas o "pulls" (indicador de confianza).
   - **Tags disponibles**: Los tags especifican las versiones. Ejemplo: `mysql:8.0`.

### **Buscar imágenes desde la terminal:**
Puedes buscar directamente desde la terminal usando:
```bash
docker search <nombre>
```
Por ejemplo:
```bash
docker search mysql
```
Esto mostrará una lista con:
- **NAME**: Nombre de la imagen.
- **DESCRIPTION**: Descripción breve.
- **STARS**: Popularidad (más estrellas es mejor).
- **OFFICIAL**: Si es una imagen oficial.

---

## **2. Descargar una imagen**
Una vez que identifiques la imagen que necesitas, puedes descargarla con el comando `docker pull`:

```bash
docker pull <nombre>:<tag>
```
- **Nombre**: El nombre de la imagen (por ejemplo, `mysql`).
- **Tag** (opcional): Especifica la versión o variante (por ejemplo, `mysql:8.0`).

### Ejemplo:
Descargar MySQL versión 8.0:
```bash
docker pull mysql:8.0
```
Si no especificas un tag, Docker usará el último tag disponible (`latest`).

---

## **3. Ver las imágenes descargadas**
Para ver todas las imágenes que tienes en tu sistema, usa:
```bash
docker images
```

---

## **4. Usar una imagen para ejecutar un contenedor**

### **Ejecutar un contenedor simple**
Si descargaste MySQL, puedes iniciar un contenedor así:
```bash
docker run --name mi-mysql -e MYSQL_ROOT_PASSWORD=tucontraseña -d mysql:8.0
```
- **--name**: Asigna un nombre al contenedor (en este caso, `mi-mysql`).
- **-e**: Define variables de entorno (como `MYSQL_ROOT_PASSWORD` para establecer la contraseña de root).
- **-d**: Ejecuta el contenedor en segundo plano (modo "detached").

Para verificar que el contenedor está corriendo:
```bash
docker ps
```

### **Conectarte al contenedor:**
Si quieres entrar en la consola de MySQL:
```bash
docker exec -it mi-mysql mysql -uroot -p
```
Esto abre una sesión interactiva.

---

## **5. Otros ejemplos comunes de imágenes útiles**

### **Servidor web con Nginx**
1. Descargar la imagen:
   ```bash
   docker pull nginx
   ```
2. Iniciar un contenedor:
   ```bash
   docker run --name mi-nginx -p 8080:80 -d nginx
   ```
   - **-p 8080:80**: Mapea el puerto 8080 de tu máquina al puerto 80 del contenedor.
3. Abre en el navegador: [http://localhost:8080](http://localhost:8080).

---

### **Aplicación Node.js**
1. Descargar la imagen:
   ```bash
   docker pull node
   ```
2. Crear un archivo `Dockerfile` para tu proyecto Node.js:
   ```Dockerfile
   FROM node:18
   WORKDIR /app
   COPY . /app
   RUN npm install
   CMD ["npm", "start"]
   ```
3. Construir la imagen y ejecutarla.

---

### **Base de datos PostgreSQL**
1. Descargar la imagen:
   ```bash
   docker pull postgres
   ```
2. Ejecutar el contenedor:
   ```bash
   docker run --name mi-postgres -e POSTGRES_PASSWORD=tucontraseña -d postgres
   ```
3. Conectarte al contenedor:
   ```bash
   docker exec -it mi-postgres psql -U postgres
   ```

---

## **6. Detener y eliminar contenedores**
- Detener un contenedor:
  ```bash
  docker stop <nombre_o_id>
  ```
- Eliminar un contenedor:
  ```bash
  docker rm <nombre_o_id>
  ```
- Eliminar una imagen:
  ```bash
  docker rmi <nombre>
  ```

---

¿Hay algún caso práctico específico que te interese explorar?














# Como conozco las variables de entorno que necesita una imagen 





¡Gran pregunta! Conocer las variables de entorno que necesita una imagen es crucial para configurarla correctamente. Hay varias formas de descubrirlas, tanto desde la documentación como usando herramientas de Docker. Aquí te explico las opciones:

---

## **1. Revisar la documentación oficial**
La forma más confiable de conocer las variables de entorno es consultar la página oficial de la imagen en Docker Hub o en la documentación del desarrollador.

### Pasos:
1. Ve a [Docker Hub](https://hub.docker.com/).
2. Busca la imagen deseada (por ejemplo, `mysql`).
3. En la página de la imagen, busca una sección como "Environment Variables", "Configuration", o "Getting Started". 
   - Ejemplo para MySQL: la documentación indica que puedes usar variables como:
     - `MYSQL_ROOT_PASSWORD` (obligatoria, define la contraseña del usuario root).
     - `MYSQL_DATABASE` (opcional, crea una base de datos inicial).
     - `MYSQL_USER` y `MYSQL_PASSWORD` (opcional, crean un usuario adicional).

---

## **2. Leer el Dockerfile de la imagen**
Cada imagen de Docker tiene un `Dockerfile` que define cómo fue creada. Muchas veces, las variables de entorno están definidas ahí con el comando `ENV`.

### Cómo inspeccionar el Dockerfile:
1. Ve a Docker Hub o al repositorio del proyecto (GitHub, GitLab, etc.).
2. Busca el archivo `Dockerfile`.
3. Busca líneas que comiencen con `ENV`. Por ejemplo:
   ```Dockerfile
   ENV MYSQL_ROOT_PASSWORD=example
   ENV MYSQL_DATABASE=exampledb
   ```

---

## **3. Inspeccionar la imagen localmente**
Si ya descargaste la imagen, puedes inspeccionarla para obtener información sobre las variables de entorno.

### Pasos:
1. Ejecuta el siguiente comando para listar las variables predeterminadas de la imagen:
   ```bash
   docker inspect <nombre_o_id_de_la_imagen>
   ```
2. Busca la sección `Config.Env`, que muestra las variables definidas en la imagen. Ejemplo:
   ```json
   "Env": [
       "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
       "MYSQL_ROOT_PASSWORD=example",
       "MYSQL_DATABASE=exampledb"
   ]
   ```

---

## **4. Revisar logs al ejecutar la imagen**
Algunas imágenes imprimen información útil al ejecutarlas por primera vez. Esto puede incluir advertencias o detalles sobre variables necesarias.

### Pasos:
1. Inicia la imagen sin configurar variables de entorno (si es seguro hacerlo):
   ```bash
   docker run <nombre_de_la_imagen>
   ```
2. Observa los mensajes en la consola. Por ejemplo, imágenes como `mysql` te indicarán que `MYSQL_ROOT_PASSWORD` es obligatoria si no la configuras.

---

## **5. Revisar archivos de configuración dentro del contenedor**
Si la documentación no es clara, puedes inspeccionar los archivos de configuración directamente en el contenedor.

### Pasos:
1. Inicia el contenedor:
   ```bash
   docker run -it <nombre_de_la_imagen> bash
   ```
2. Busca archivos de configuración relevantes (por ejemplo, `/etc/`, `/app/` o similares).
3. Lee los archivos con un editor de texto como `cat` o `nano` para identificar configuraciones posibles.

---

## **6. Preguntar a la comunidad**
Si no encuentras las variables necesarias en la documentación oficial o inspeccionando la imagen, puedes buscar en foros o comunidades técnicas como:
- Stack Overflow
- GitHub Issues del proyecto
- Foros de Docker ([Docker Community Forums](https://forums.docker.com/)).

---

¿Tienes alguna imagen en mente con la que quieras probar esto? ¡Puedo ayudarte a investigar!














Configurar tus propias imágenes de Docker te permite personalizar entornos según tus necesidades. Esto se logra creando un **Dockerfile**, que define cómo se construye la imagen. Aquí tienes una guía completa para crear y configurar tus imágenes:

---

## **1. ¿Qué es un Dockerfile?**
Un **Dockerfile** es un archivo de texto que contiene una serie de instrucciones para construir una imagen de Docker. Estas instrucciones especifican:
- La imagen base.
- Qué software instalar.
- Archivos que copiar.
- Variables de entorno.
- Comandos que se ejecutan al iniciar un contenedor.

---

## **2. Crear una imagen desde un Dockerfile**

### **Paso 1: Crear el archivo Dockerfile**
1. En tu proyecto, crea un archivo llamado `Dockerfile` (sin extensión).

### **Paso 2: Definir las instrucciones del Dockerfile**
A continuación, se explican las instrucciones más comunes:

#### a) **Definir la imagen base**
La imagen base es el punto de partida. Por ejemplo:
```dockerfile
FROM ubuntu:latest
```

#### b) **Configurar el directorio de trabajo**
Define el directorio dentro del contenedor donde trabajarás:
```dockerfile
WORKDIR /app
```

#### c) **Copiar archivos al contenedor**
Usa `COPY` o `ADD` para copiar archivos desde tu máquina al contenedor:
```dockerfile
COPY . /app
```

#### d) **Instalar dependencias**
Usa `RUN` para ejecutar comandos durante la construcción de la imagen. Por ejemplo:
```dockerfile
RUN apt-get update && apt-get install -y python3 python3-pip
```

#### e) **Definir variables de entorno**
Usa `ENV` para configurar variables globales dentro del contenedor:
```dockerfile
ENV PORT=8080
```

#### f) **Exponer puertos**
Especifica qué puertos estarán disponibles:
```dockerfile
EXPOSE 8080
```

#### g) **Configurar el comando de inicio**
Define el comando que se ejecutará cuando inicie el contenedor:
```dockerfile
CMD ["python3", "app.py"]
```

---

### **Ejemplo completo de Dockerfile**
Si tienes una aplicación Python, tu `Dockerfile` podría verse así:

```dockerfile
# Usa Ubuntu como imagen base
FROM ubuntu:latest

# Instala Apache2 de manera silenciosa
RUN apt update && apt install -y apache2

# Copia la carpeta "html" al directorio raíz de Apache
COPY html/ /var/www/html/

# Expone el puerto 80 para acceder al servidor
EXPOSE 80

# Comando para iniciar Apache en primer plano
CMD ["apachectl", "-D", "FOREGROUND"]

```

---

### **Paso 3: Construir la imagen**
Usa el comando `docker build` para construir tu imagen:
```bash
docker build -t nombre_de_la_imagen:tag .
```
- **`-t`**: Especifica el nombre y la etiqueta de la imagen.
- **`.`**: Indica que el Dockerfile está en el directorio actual.

Ejemplo:
```bash
docker build -t mi-app:1.0 .
```

---

## **3. Ejecutar tu imagen personalizada**
Una vez creada, ejecuta un contenedor a partir de tu imagen:
```bash
docker run -p 5000:5000 mi-app:1.0
```
- **`-p 5000:5000`**: Mapea el puerto 5000 del contenedor al puerto 5000 de tu máquina.
- **`mi-app:1.0`**: Nombre y etiqueta de la imagen.

---

## **4. Optimizar tu Dockerfile**
Algunas prácticas recomendadas para optimizar tus imágenes:

### **a) Minimiza la imagen base**
Usa imágenes ligeras como `alpine` si es posible:
```dockerfile
FROM python:3.9-alpine
```

### **b) Combina comandos**
Reduce la cantidad de capas combinando comandos `RUN`:
```dockerfile
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip && \
    apt-get clean
```

### **c) Usa `.dockerignore`**
Crea un archivo `.dockerignore` para evitar copiar archivos innecesarios al contenedor:
```
.git
node_modules
*.pyc
```

---

## **5. Publicar tu imagen**
Para compartir tu imagen, puedes subirla a Docker Hub u otro registro:

### **a) Iniciar sesión en Docker Hub**
```bash
docker login
```

### **b) Etiquetar la imagen**
```bash
docker tag mi-app:1.0 usuario/mi-app:1.0
```

### **c) Subir la imagen**
```bash
docker push usuario/mi-app:1.0
```

---

## **6. Ver imágenes locales**
Para ver las imágenes que has creado en tu máquina:
```bash
docker images
```

---

Con esto, ya puedes configurar y personalizar tus propias imágenes. ¿Quieres probar con un ejemplo específico o necesitas ayuda con algún caso concreto?





















# Para hacer que los datos sean persistentes en contenedores Docker (por ejemplo, bases de datos o archivos generados por tu aplicación), puedes usar **volúmenes** o **bind mounts**. Ambas opciones permiten guardar los datos fuera del contenedor, asegurando que no se pierdan si el contenedor se detiene o elimina.

---

## **Opciones para persistencia de datos en Docker**

### **1. Usar volúmenes de Docker**
Un volumen es un área de almacenamiento gestionada por Docker en tu máquina host. Es la opción más recomendada, ya que Docker se encarga de manejar su ubicación y permisos.

#### **Crear y usar un volumen**
1. **Crear un volumen** (opcional):
   ```bash
   docker volume create mi-volumen
   ```

2. **Ejecutar un contenedor con el volumen**:
   ```bash
   docker run -d --name mi-contenedor -v mi-volumen:/ruta/en/contenedor imagen
   ```
   - `mi-volumen`: Nombre del volumen creado o asignado automáticamente.
   - `/ruta/en/contenedor`: Ruta dentro del contenedor donde se montará el volumen.

3. **Ejemplo: MySQL con un volumen**:
   ```bash
   docker run -d \
     --name mysql-server \
     -e MYSQL_ROOT_PASSWORD=tucontraseña \
     -v mi-volumen:/var/lib/mysql \
     mysql:8.0
   ```
   Aquí, los datos de la base de datos se almacenan en el volumen `mi-volumen` en lugar de dentro del contenedor.

4. **Listar volúmenes**:
   ```bash
   docker volume ls
   ```

5. **Inspeccionar un volumen**:
   ```bash
   docker volume inspect mi-volumen
   ```
   Esto te muestra la ubicación física del volumen en tu máquina host.

---

### **2. Usar bind mounts**
Con los **bind mounts**, puedes mapear un directorio específico de tu máquina host dentro del contenedor. Es útil si quieres tener control total sobre dónde se almacenan los datos en tu sistema.

#### **Ejemplo: Usar un bind mount**
```bash
docker run -d \
  --name mi-app \
  -v /ruta/host:/ruta/contenedor \
  imagen
```
- **`/ruta/host`**: Carpeta en tu máquina local.
- **`/ruta/contenedor`**: Carpeta dentro del contenedor.

#### **Ejemplo práctico: Compartir archivos**
Si tienes una aplicación que escribe logs, puedes mapear un directorio para almacenarlos:
```bash
docker run -d \
  --name nginx \
  -v /mi/directorio/local:/var/log/nginx \
  nginx
```
Esto asegura que los logs de Nginx se guarden en `/mi/directorio/local`.

---

### **3. Diferencias clave entre volúmenes y bind mounts**
| Característica | **Volúmenes**                         | **Bind mounts**                           |
| -------------- | ------------------------------------- | ----------------------------------------- |
| Gestión        | Docker los gestiona automáticamente   | Necesitas gestionar las rutas manualmente |
| Portabilidad   | Se puede mover fácilmente entre hosts | Menos portátil                            |
| Seguridad      | Más seguro y aislado                  | Menos seguro (acceso directo al sistema)  |
| Rendimiento    | Optimizado por Docker                 | Depende del sistema de archivos           |

---

## **4. Persistencia con Docker Compose**
Si usas **Docker Compose**, puedes definir volúmenes directamente en tu archivo `docker-compose.yml`.

#### **Ejemplo: Configurar un servicio con volúmenes**

```yaml
version: "3.9"
services:
  mysql:
    image: mysql:8.0
    container_name: mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: tucontraseña
    volumes:
      - mi-volumen:/var/lib/mysql
volumes:
  mi-volumen:
```

Con este archivo, simplemente ejecutas:
```bash
docker-compose up -d
```

---

## **5. Buenas prácticas para persistencia**
1. **Usa volúmenes siempre que sea posible**, ya que son más seguros y portátiles.
2. **Realiza backups de los volúmenes**:
   - Crear un backup:
     ```bash
     docker run --rm -v mi-volumen:/data -v $(pwd):/backup ubuntu tar cvf /backup/mi-volumen.tar /data
     ```
   - Restaurar un backup:
     ```bash
     docker run --rm -v mi-volumen:/data -v $(pwd):/backup ubuntu tar xvf /backup/mi-volumen.tar -C /data
     ```
3. Si usas bind mounts, asegúrate de que los permisos del sistema de archivos sean correctos para evitar errores de acceso.
4. Usa **Docker Compose** para definir configuraciones complejas que incluyan persistencia de datos.

---

Con esta información, puedes configurar persistencia para tus contenedores de manera segura y eficiente. ¿Quieres que hagamos un ejemplo práctico juntos?

